From cc893913c5811e78210e006ebaa4aac6dc59c754 Mon Sep 17 00:00:00 2001
From: Timo Herbrecher <t.herbrecher@gateware.de>
Date: Wed, 25 May 2016 14:12:20 +0200
Subject: [PATCH] Modified mkimage to build RCW binaries

mkimage was modified to build a binary reset configuration word (RCW) file for Freescale PowerArchitecture controllers. CONFIG_FSL_RCW_BIN has to be defined and CONFIG_SYS_FSL_RCW points to the RCW configuration file that is the source of the image.
With this modification a RCW blob could be generated from the uboot source tree. This could e.g. be programmed to the NOR flash.
---
 Makefile          |   6 ++
 common/image.c    |   1 +
 include/image.h   |   1 +
 tools/Makefile    |   1 +
 tools/imagetool.h |   2 +
 tools/mkimage.c   |   3 +
 tools/rcwimage.c  | 206 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 tools/rcwimage.h  |  20 ++++++
 8 files changed, 240 insertions(+)
 create mode 100644 tools/rcwimage.c
 create mode 100644 tools/rcwimage.h

diff --git a/Makefile b/Makefile
index af5b8a6..d535486 100644
--- a/Makefile
+++ b/Makefile
@@ -740,6 +740,7 @@ ALL-$(CONFIG_RAMBOOT_PBL) += u-boot-with-spl-pbl.bin
 else
 ALL-$(CONFIG_RAMBOOT_PBL) += u-boot.pbl
 endif
+ALL-$(CONFIG_FSL_RCW_BIN) += fsl_rcw.bin
 ALL-$(CONFIG_SPL) += spl/u-boot-spl.bin
 ALL-$(CONFIG_SPL_FRAMEWORK) += u-boot.img
 ALL-$(CONFIG_TPL) += tpl/u-boot-tpl.bin
@@ -898,6 +899,11 @@ u-boot.img u-boot.kwb u-boot.pbl: u-boot.bin FORCE
 u-boot-spl.kwb: u-boot.img spl/u-boot-spl.bin FORCE
 	$(call if_changed,mkimage)
 
+MKIMAGEFLAGS_fsl_rcw.bin = -n $(srctree)/$(CONFIG_SYS_FSL_RCW:"%"=%) -T rcwimage
+
+fsl_rcw.bin: $(srctree)/$(CONFIG_SYS_FSL_RCW:"%"=%) FORCE
+	$(call if_changed,mkimage)
+
 MKIMAGEFLAGS_u-boot-dtb.img = $(MKIMAGEFLAGS_u-boot.img)
 
 u-boot-dtb.img: u-boot-dtb.bin FORCE
diff --git a/common/image.c b/common/image.c
index f0f0135..52d4192 100644
--- a/common/image.c
+++ b/common/image.c
@@ -142,6 +142,7 @@ static const table_entry_t uimage_type[] = {
 	{	IH_TYPE_MULTI,	    "multi",	  "Multi-File Image",	},
 	{	IH_TYPE_OMAPIMAGE,  "omapimage",  "TI OMAP SPL With GP CH",},
 	{	IH_TYPE_PBLIMAGE,   "pblimage",   "Freescale PBL Boot Image",},
+	{	IH_TYPE_RCWIMAGE,   "rcwimage",   "Freescale RCW binary image",},
 	{	IH_TYPE_RAMDISK,    "ramdisk",	  "RAMDisk Image",	},
 	{	IH_TYPE_SCRIPT,     "script",	  "Script",		},
 	{	IH_TYPE_SOCFPGAIMAGE, "socfpgaimage", "Altera SOCFPGA preloader",},
diff --git a/include/image.h b/include/image.h
index b6eb57e..982e2ca 100644
--- a/include/image.h
+++ b/include/image.h
@@ -245,6 +245,7 @@ struct lmb;
 #define IH_TYPE_X86_SETUP	20	/* x86 setup.bin Image		*/
 #define IH_TYPE_LPC32XXIMAGE	21	/* x86 setup.bin Image		*/
 #define IH_TYPE_LOADABLE	22	/* A list of typeless images	*/
+#define IH_TYPE_RCWIMAGE	23	/* Freescale RCW binary image   */
 
 /*
  * Compression Types
diff --git a/tools/Makefile b/tools/Makefile
index 8ff9c2e..c4cf04f 100644
--- a/tools/Makefile
+++ b/tools/Makefile
@@ -89,6 +89,7 @@ dumpimage-mkimage-objs := aisimage.o \
 			os_support.o \
 			pblimage.o \
 			pbl_crc32.o \
+			rcwimage.o \
 			socfpgaimage.o \
 			lib/sha1.o \
 			lib/sha256.o \
diff --git a/tools/imagetool.h b/tools/imagetool.h
index b7874f4..a6677b2 100644
--- a/tools/imagetool.h
+++ b/tools/imagetool.h
@@ -186,6 +186,8 @@ int imagetool_save_subimage(
 
 void pbl_load_uboot(int fd, struct image_tool_params *mparams);
 
+void rcw_load_cfg_file(int fd, struct image_tool_params *mparams);
+
 #define ___cat(a, b) a ## b
 #define __cat(a, b) ___cat(a, b)
 
diff --git a/tools/mkimage.c b/tools/mkimage.c
index 5ccd951..c7ec531 100644
--- a/tools/mkimage.c
+++ b/tools/mkimage.c
@@ -344,6 +344,9 @@ NXTARG:		;
 		} else if (params.type == IH_TYPE_PBLIMAGE) {
 			/* PBL has special Image format, implements its' own */
 			pbl_load_uboot(ifd, &params);
+		} else if (params.type == IH_TYPE_RCWIMAGE) {
+			/* RCW has special Image format, implements its' own */
+			rcw_load_cfg_file(ifd, &params);
 		} else {
 			copy_file(ifd, params.datafile, pad_len);
 		}
diff --git a/tools/rcwimage.c b/tools/rcwimage.c
new file mode 100644
index 0000000..bd689cc
--- /dev/null
+++ b/tools/rcwimage.c
@@ -0,0 +1,206 @@
+/*
+ * Copyright 2016 TQ Systems GmbH
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+#include "imagetool.h"
+#include <image.h>
+#include "rcwimage.h"
+#include "pbl_crc32.h"
+
+/*
+ * need to store all bytes in memory for calculating crc32, then write the
+ * bytes to RCW image file.
+ */
+static unsigned char mem_buf[128];
+static unsigned char *pmem_buf = mem_buf;
+static int rcw_size;
+static char *fname = "Unknown";
+static int lineno = -1;
+static struct rcw_header rcwimage_header;
+static int arch_flag;
+
+static uint32_t rcw_crc_cmd1;
+static uint32_t rcw_crc_cmd2;
+
+static union
+{
+	char c[4];
+	unsigned char l;
+} endian_test = { {'l', '?', '?', 'b'} };
+
+#define ENDIANNESS ((char)endian_test.l)
+
+static void check_get_hexval(char *token)
+{
+	uint32_t hexval;
+	int i;
+
+	if (!sscanf(token, "%x", &hexval)) {
+		printf("Error:%s[%d] - Invalid hex data(%s)\n", fname,
+			lineno, token);
+		exit(EXIT_FAILURE);
+	}
+	for (i = 3; i >= 0; i--) {
+		*pmem_buf++ = (hexval >> (i * 8)) & 0xff;
+		rcw_size++;
+	}
+}
+
+static void rcw_parser(char *name)
+{
+	FILE *fd = NULL;
+	char *line = NULL;
+	char *token, *saveptr1, *saveptr2;
+	size_t len = 0;
+
+	fname = name;
+	fd = fopen(name, "r");
+	if (fd == NULL) {
+		printf("Error:%s - Can't open\n", fname);
+		exit(EXIT_FAILURE);
+	}
+
+	while ((getline(&line, &len, fd)) > 0) {
+		lineno++;
+		token = strtok_r(line, "\r\n", &saveptr1);
+		/* drop all lines with zero tokens (= empty lines) */
+		if (token == NULL)
+			continue;
+		for (line = token;; line = NULL) {
+			token = strtok_r(line, " \t", &saveptr2);
+			if (token == NULL)
+				break;
+			/* Drop all text starting with '#' as comments */
+			if (token[0] == '#')
+				break;
+			check_get_hexval(token);
+		}
+	}
+	if (line)
+		free(line);
+	fclose(fd);
+}
+
+static uint32_t reverse_byte(uint32_t val)
+{
+	uint32_t temp;
+	unsigned char *p1;
+	int j;
+
+	temp = val;
+	p1 = (unsigned char *)&temp;
+	for (j = 3; j >= 0; j--)
+		*p1++ = (val >> (j * 8)) & 0xff;
+	return temp;
+}
+
+/* write crc command to memory. */
+static void add_crc_cmd(void)
+{
+	uint32_t crc32_rcw;
+
+	/* Add CRC command. */
+	*pmem_buf++ = 0x08;
+	*pmem_buf++ = rcw_crc_cmd1;
+	*pmem_buf++ = rcw_crc_cmd2;
+	*pmem_buf++ = 0x40;
+	rcw_size += 4;
+
+	/* calculated CRC32 and write it to memory. */
+	crc32_rcw = pbl_crc32(0, (const char *)mem_buf, rcw_size);
+	*pmem_buf++ = (crc32_rcw >> 24) & 0xff;
+	*pmem_buf++ = (crc32_rcw >> 16) & 0xff;
+	*pmem_buf++ = (crc32_rcw >> 8) & 0xff;
+	*pmem_buf++ = (crc32_rcw) & 0xff;
+	rcw_size += 4;
+}
+
+void rcw_load_cfg_file(int ifd, struct image_tool_params *params)
+{
+	int size;
+
+	/* parse the rcw.cfg file. */
+	rcw_parser(params->imagename);
+
+	add_crc_cmd();
+
+        lseek(ifd, 0, SEEK_SET);
+	size = rcw_size;
+	if (write(ifd, (const void *)&mem_buf, size) != size) {
+		fprintf(stderr, "Write error on %s: %s\n",
+			params->imagefile, strerror(errno));
+		exit(EXIT_FAILURE);
+	}
+}
+
+static int rcwimage_check_image_types(uint8_t type)
+{
+	if (type == IH_TYPE_RCWIMAGE)
+		return EXIT_SUCCESS;
+	else
+		return EXIT_FAILURE;
+}
+
+static int rcwimage_verify_header(unsigned char *ptr, int image_size,
+			struct image_tool_params *params)
+{
+	struct rcw_header *rcw_hdr = (struct rcw_header *) ptr;
+
+	/* Only a few checks can be done: search for magic numbers */
+	if (ENDIANNESS == 'l') {
+		if (rcw_hdr->preamble != reverse_byte(RCW_PREAMBLE))
+			return -FDT_ERR_BADSTRUCTURE;
+
+		if (rcw_hdr->rcwheader != reverse_byte(RCW_HEADER))
+			return -FDT_ERR_BADSTRUCTURE;
+	} else {
+		if (rcw_hdr->preamble != RCW_PREAMBLE)
+			return -FDT_ERR_BADSTRUCTURE;
+
+		if (rcw_hdr->rcwheader != RCW_HEADER)
+			return -FDT_ERR_BADSTRUCTURE;
+	}
+	return 0;
+}
+
+static void rcwimage_print_header(const void *ptr)
+{
+	printf("Image Type:   Freescale RCW binary image\n");
+}
+
+static void rcwimage_set_header(void *ptr, struct stat *sbuf, int ifd,
+				struct image_tool_params *params)
+{
+	/*nothing need to do, rcw_load_cfg_file takes care of whole file. */
+}
+
+int rcwimage_check_params(struct image_tool_params *params)
+{
+	if (!params)
+		return EXIT_FAILURE;
+
+	if (params->arch == IH_ARCH_PPC) {
+		arch_flag = IH_ARCH_PPC;
+		rcw_crc_cmd1 = 0x13;
+		rcw_crc_cmd2 = 0x80;
+	}
+
+	return 0;
+};
+
+/* rcwimage parameters */
+U_BOOT_IMAGE_TYPE(
+	rcwimage,
+	"Freescale RCW binary image support",
+	sizeof(struct rcw_header),
+	(void *)&rcwimage_header,
+	rcwimage_check_params,
+	rcwimage_verify_header,
+	rcwimage_print_header,
+	rcwimage_set_header,
+	NULL,
+	rcwimage_check_image_types,
+	NULL,
+	NULL
+);
diff --git a/tools/rcwimage.h b/tools/rcwimage.h
new file mode 100644
index 0000000..35e4b78
--- /dev/null
+++ b/tools/rcwimage.h
@@ -0,0 +1,20 @@
+/*
+ * Copyright 2016 TQ Systems GmbH
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef RCWIMAGE_H
+#define RCWIMAGE_H
+
+#define RCW_BYTES	64
+#define RCW_PREAMBLE	0xaa55aa55
+#define RCW_HEADER	0x010e0100
+
+struct rcw_header {
+	uint32_t preamble;
+	uint32_t rcwheader;
+	uint8_t rcw_data[RCW_BYTES];
+};
+
+#endif /* RCWIMAGE_H */
-- 
1.9.1

