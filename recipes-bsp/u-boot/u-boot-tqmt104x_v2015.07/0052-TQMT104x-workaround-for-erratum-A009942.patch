From dd58412a8cd454ffec9ec601861ecd7312d78eb7 Mon Sep 17 00:00:00 2001
From: Stefan Lange <s.lange@gateware.de>
Date: Wed, 12 Jul 2017 08:45:50 +0200
Subject: [PATCH] TQMT104x: workaround for erratum A009942

Implement workaround for CPU T104x erratum A009942.
Implemented for both
- fixed DDR timing (in board/tqc/tqmt104x/ddr.c)
- raw DDR timing (in drivers/ddr/fsl/mpc85xx_ddr_gen3.c)

Signed-off-by: Radek Raichel <raichelr@tqs.de>
Reviewed-by: Stefan Lange <s.lange@gateware.de>
---
 arch/powerpc/cpu/mpc85xx/cmd_errata.c     |  4 +++
 arch/powerpc/include/asm/config_mpc85xx.h |  1 +
 board/tqc/tqmt104x/ddr.c                  | 51 ++++++++++++++++++++++++++
 drivers/ddr/fsl/mpc85xx_ddr_gen3.c        | 59 +++++++++++++++++++++++++++++++
 4 files changed, 115 insertions(+)

diff --git a/arch/powerpc/cpu/mpc85xx/cmd_errata.c b/arch/powerpc/cpu/mpc85xx/cmd_errata.c
index b368562..69331f7 100644
--- a/arch/powerpc/cpu/mpc85xx/cmd_errata.c
+++ b/arch/powerpc/cpu/mpc85xx/cmd_errata.c
@@ -327,6 +327,10 @@ static int do_errata(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 	puts("Work-around for Erratum XFI on B4860QDS enabled\n");
 #endif
 
+#ifdef CONFIG_SYS_FSL_ERRATUM_A009942
+	puts("Work-around for Erratum A009942 enabled\n");
+#endif
+
 	return 0;
 }
 
diff --git a/arch/powerpc/include/asm/config_mpc85xx.h b/arch/powerpc/include/asm/config_mpc85xx.h
index 9d56bc1..895526b 100644
--- a/arch/powerpc/include/asm/config_mpc85xx.h
+++ b/arch/powerpc/include/asm/config_mpc85xx.h
@@ -800,6 +800,7 @@ defined(CONFIG_PPC_T1020) || defined(CONFIG_PPC_T1022)
 #define CONFIG_SYS_FSL_USB_DUAL_PHY_ENABLE
 #define CONFIG_SYS_FSL_USB_INTERNAL_UTMI_PHY
 #define CONFIG_SYS_FSL_ERRATUM_A006261
+#define CONFIG_SYS_FSL_ERRATUM_A009942
 #define CONFIG_SYS_CCSRBAR_DEFAULT	0xfe000000
 #define CONFIG_SYS_FSL_ERRATUM_ESDHC111
 #define ESDHCI_QUIRK_BROKEN_TIMEOUT_VALUE
diff --git a/board/tqc/tqmt104x/ddr.c b/board/tqc/tqmt104x/ddr.c
index 5e9a320..a7af984 100644
--- a/board/tqc/tqmt104x/ddr.c
+++ b/board/tqc/tqmt104x/ddr.c
@@ -169,6 +169,11 @@ phys_size_t fixed_sdram(void)
         int timeout;
         size_t ddr_size;
 
+#ifdef CONFIG_SYS_FSL_ERRATUM_A009942
+	u32 tmp;
+	u32 CPOmin, CPOmax;
+#endif
+
         out_be32(&ddr->sdram_cfg, DDR_SDRAM_CFG);
 
         out_be32(&ddr->cs0_bnds, DDR_CS0_BNDS);
@@ -205,6 +210,52 @@ phys_size_t fixed_sdram(void)
         out_be32(&ddr->sdram_cfg_2,  DDR_SDRAM_CFG_2);
         out_be32(&ddr->ddr_cdr2, DDR_DDR_CDR2);
 
+#ifdef CONFIG_SYS_FSL_ERRATUM_A009942
+	tmp = in_be32(&ddr->debug[28]);
+	tmp &= 0xFF0FFF00L;
+	tmp |= 0x0070006fL;
+	out_be32(&ddr->debug[28], tmp);
+
+	CPOmin = 0; CPOmax = 0;
+	tmp = in_be32(&ddr->debug[9]);   // CPO Lane 0/1
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0x0000FFFFL));
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0x0000FFFFL));
+	tmp = in_be32(&ddr->debug[10]);  // CPO Lane 2/3
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0x0000FFFFL));
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0x0000FFFFL));
+	tmp = in_be32(&ddr->debug[11]);  // CPO Lane 4/5
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0x0000FFFFL));
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0x0000FFFFL));
+	tmp = in_be32(&ddr->debug[12]);  // CPO Lane 6/7
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0x0000FFFFL));
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0x0000FFFFL));
+#ifdef CONFIG_DDR_ECC
+	tmp = in_be32(&ddr->debug[13]);  // CPO ECC Lane
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0x0000FFFFL));
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0x0000FFFFL));
+#endif /* CONFIG_DDR_ECC */
+	tmp = in_be32(&ddr->debug[28]);
+	tmp &= 0xFF000000L;
+	tmp >>= 24;
+
+	if ((CPOmin + 0x3FL) < tmp){
+		tmp = in_be32(&ddr->debug[28]);
+		tmp &= 0x00FFFFFFL;
+		tmp |= ((u32)(((CPOmax + CPOmin)>>1) + 0x27) << 24);
+		out_be32(&ddr->debug[28], tmp );
+	}
+#endif /* CONFIG_SYS_FSL_ERRATUM_A009942 */
+
         udelay(500);
         asm volatile("sync;isync");
 
diff --git a/drivers/ddr/fsl/mpc85xx_ddr_gen3.c b/drivers/ddr/fsl/mpc85xx_ddr_gen3.c
index 6752d4d..2b5ae3c 100644
--- a/drivers/ddr/fsl/mpc85xx_ddr_gen3.c
+++ b/drivers/ddr/fsl/mpc85xx_ddr_gen3.c
@@ -42,6 +42,12 @@ void fsl_ddr_set_memctl_regs(const fsl_ddr_cfg_regs_t *regs,
 	u32 save1, save2;
 #endif
 
+#ifdef CONFIG_SYS_FSL_ERRATUM_A009942
+	ulong ddr_freq;
+	u32 tmp;
+	u32 CPOmin, CPOmax;
+#endif
+
 	switch (ctrl_num) {
 	case 0:
 		ddr = (void *)CONFIG_SYS_FSL_DDR_ADDR;
@@ -185,6 +191,59 @@ void fsl_ddr_set_memctl_regs(const fsl_ddr_cfg_regs_t *regs,
 	out_be32(&ddr->debug[21], 0x24000000);
 #endif /* CONFIG_SYS_FSL_ERRATUM_DDR_A003474 */
 
+#ifdef CONFIG_SYS_FSL_ERRATUM_A009942
+	ddr_freq = get_ddr_freq(ctrl_num) / 1000000;
+	tmp = in_be32(&ddr->debug[28]);
+	tmp &= 0xFF0FFF00L;
+	if (ddr_freq <= 1333)
+		tmp |= 0x0080006aL;
+	else if (ddr_freq <= 1600)
+		tmp |= 0x0070006fL;
+	else if (ddr_freq <= 1867)
+		tmp |= 0x00700076L;
+	else if (ddr_freq <= 2133)
+		tmp |= 0x0060007bL;
+	out_be32(&ddr->debug[28], tmp);
+
+	CPOmin = 0; CPOmax = 0;
+	tmp = in_be32(&ddr->debug[9]);   // CPO Lane 0/1
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0x0000FFFFL));
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0x0000FFFFL));
+	tmp = in_be32(&ddr->debug[10]);  // CPO Lane 2/3
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0x0000FFFFL));
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0x0000FFFFL));
+	tmp = in_be32(&ddr->debug[11]);  // CPO Lane 4/5
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0x0000FFFFL));
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0x0000FFFFL));
+	tmp = in_be32(&ddr->debug[12]);  // CPO Lane 6/7
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0x0000FFFFL));
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0x0000FFFFL));
+#ifdef CONFIG_DDR_ECC
+	tmp = in_be32(&ddr->debug[13]);  // CPO ECC Lane
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmin = min((u32)CPOmin,(u32)(tmp & 0x0000FFFFL));
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0xFFFF0000L)>>16);
+	CPOmax = max((u32)CPOmax,(u32)(tmp & 0x0000FFFFL));
+#endif
+	tmp = in_be32(&ddr->debug[28]);
+	tmp &= 0xFF000000L;
+	tmp >>= 24;
+
+	if ((CPOmin + 0x3FL) < tmp){
+		tmp = in_be32(&ddr->debug[28]);
+		tmp &= 0x00FFFFFFL;
+		tmp |= ((((CPOmax + CPOmin)>>1) + 0x27) << 24);
+		out_be32(&ddr->debug[28], tmp );
+	}
+#endif
 	/*
 	 * For RDIMMs, JEDEC spec requires clocks to be stable before reset is
 	 * deasserted. Clocks start when any chip select is enabled and clock
-- 
1.9.1

